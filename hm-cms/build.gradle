// 配置运行构建脚本的要求
buildscript {
    // 设置自定义属性
    ext {
        springBootVersion = '2.2.9.RELEASE'
    }
    // 解决buildscript块中的依赖项时，检查Maven Central中的依赖项
    repositories {
        mavenCentral()
    }
    // 我们需要spring boot插件来运行构建脚本
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

// 添加构建插件 ,方式一
//注意：plugins{}必须放在buildscript{}之后或者其他的plugins{}的后边，否则报错！
//报错：
//参考：https://www.jianshu.com/p/d9900c942071
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

/*plugins {
    id 'java'
    //报错：Error resolving plugin [id: 'org.springframework.boot', version: '2.2.9.RELEASE']
    id 'org.springframework.boot' version '2.2.9.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}*/

//添加插件，方式二
//apply plugin: 'java'
//apply plugin: "idea"

configurations {
    //定义
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// 定制项目
//jdk版本
sourceCompatibility = 1.8
//编码
[compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'
//项目版本
version = '1.0'
// 设置全局变量
group = 'com.hm.cms'
//项目版本
version = '0.0.1-SNAPSHOT'



//使用仓库
repositories {
    //第三方仓库
    maven{url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    //maven中央仓库
    mavenCentral()
    jcenter()
}

// 添加项目依赖
dependencies {
    //implementation()定义编译时所需的依赖项。此配置方法称为compile。
    //testImplementation()并定义了仅用于测试（旧testCompile）所需的依赖项。
    //runtimeOnly和testRuntimeOnly。这声明了运行时提供的不需要对其进行编译的依赖项。
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'


}
test {
    useJUnitPlatform()
}



